{"pageProps":{"articlesDetail":{"year":"2022","month":"07","folder":"../md/2022-07-notas-do-blog-pessoal","slug":"2022-07-notas-do-blog-pessoal","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    p: \"p\",\n    code: \"code\",\n    ol: \"ol\",\n    em: \"em\",\n    a: \"a\",\n    pre: \"pre\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Notas do blog pessoal\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Requisitos\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Escrever textos em markdown\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Preferencialmente usando arquivos, sobre um controle de versão\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Facilmente inserir imagens\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Publicar no commit\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Requisitos mais avançados\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Suportar uma estrutura já existente de textos escritos\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Suportar wikilinks\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Exibir backlinks\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Permitir leitura também pelo github\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Syntax highlighting\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Publicação e sincronização em plataformas externas via API\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Editar pelo celular\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Em geral acho o github muito bonito para leitura. Porém se o texto incluir wikilinks, ele precisa de processamento pra poder ser diretamente lido pelo Github. Se o site ficar bonito, então o Github não é lá importante.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pra edição de arquivos .md temos Obsidian, VSCode, Typora... Cada um deles tem seus quirks e bugs em relação a edição de blocos de código, inserção de imagens e navegação.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A algum tempo eu já vinha acumulando alguns artigos (blogs ou peças maiores) em .md para talvez num futuro publicar em um site local. Alguns foram publicados no dev.to e no gitbook. Ao publicar no dev.to e ficar editando lá, o artigo acaba dessincronizando.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Implementação\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A idéia é converter o markdown em HTML usando um gerador estático. Vamos de next.js pela familiaridade. Gera páginas estáticas e é flexível e bem suportado.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"No lado do CSS, vamos de Chakra. É algo com que ainda estou me familiarizando mas em geral é um software com que \\\"fui com a cara\\\" [[Atributos de um software que me fazem ir com a sua cara | (adiciona wikilink pra futuramente escrever o que me faz ir com a cara de um software)]].\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Estrutura pré-existente\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Pasta \", _jsx(_components.code, {\n          children: \"md\"\n        }), \" dentro do \", _jsx(_components.code, {\n          children: \"wkrueger.github.io\"\n        }), \". Cada post gera uma subpasta com ano, mês e slug. A subpasta vai possuir um arquivo \", _jsx(_components.code, {\n          children: \".md\"\n        }), \" e pode possuir imagens e rascunhos;\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Nome da pasta: \", _jsx(_components.code, {\n          children: \"2021-04-slug-do-artigo\"\n        }), \";\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Além da estrutura de posts de blog, isso talvez possa expandir pra outras pastas com conjuntos de documentos;\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Além do conteúdo no \", _jsx(_components.code, {\n          children: \"github.io\"\n        }), \", tenho outras coisas postadas em outros repositórios de GitBook, que mais adiante poderiam ser integradas;\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Montando a listagem de artigos\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Escrever código para varrer a pasta de markdowns pra gerar uma lista com informações dos artigos;\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Este é um código de backend, portanto ele mora dentro de um \", _jsx(_components.code, {\n          children: \"getStaticProps()\"\n        }), \";\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Tem que tem um cuidado especial ao importar APIs de servidor;\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"O nome da pasta não é suficiente pra termos um nome de artigo (apenas um slug); Alternativas:\", \"\\n\", _jsxs(_components.ol, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"Implementar o \", _jsx(_components.em, {\n              children: \"front-matter\"\n            }), \" e editar os arquivos markdown existentes;\"]\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Rodar uma heurística que lê a primeira tag H1 e a marca como título;\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Seguimos na alternativa 2, por hora. Tentei ler apenas o início de cada arquivo, mas na verdade isso não vai poupar quase nada de processamento;\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Montando os primeiros estilos\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Sigo como exemplo de inspiração o \", _jsx(_components.a, {\n          href: \"https://www.swyx.io/js-third-age\",\n          children: \"blog do swyx\"\n        }), \";\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Implemento o \", _jsx(_components.a, {\n          href: \"https://chakra-ui.com/docs/styled-system/color-mode\",\n          children: \"Dark Mode do Chakra\"\n        }), \", o que é relativamente direto;\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"O tema do Dark Mode do Chakra é convencional e bonito. Adiciono uns acentos de laranja, inspirado no swyx. Por sorte o laranja também funcionou no modo claro;\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Sofro um pouco pra entender como acessar a \", _jsx(_components.a, {\n          href: \"https://chakra-ui.com/docs/styled-system/theme\",\n          children: \"paleta de cores\"\n        }), \" do tema base; Na verdade até agora não está muito claro;\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"As cores podem ser acessadas via variáveis CSS (dá pra ver no inspetor) ou via \", _jsx(_components.em, {\n              children: \"semantic tokens\"\n            }), \". O problema é que na documentação não explica muito bem \", _jsx(_components.em, {\n              children: \"quais\"\n            }), \" variáveis estão disponíveis no tema base;\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Quando eu uso diretamente uma cor da paleta do Chakra, esta não se adapta entre os modos claro e escuro;\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Me lembro de no Material-UI ter um esquema de passar uma função no CSS para acessar o modo de cor, mas no Chakra não encontrei nada disso;\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"A forma que encontrei foi definir um \", _jsx(_components.a, {\n              href: \"https://chakra-ui.com/docs/styled-system/semantic-tokens\",\n              children: \"semantic token\"\n            }), \" com as condições \\\"_dark\\\" e \\\"_light\\\";\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"O \", _jsx(_components.em, {\n          children: \"semantic token\"\n        }), \" é então interpolado em qualquer definição de estilo. Ex:\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-tsx\",\n      children: _jsxs(_components.code, {\n        className: \"language-tsx\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"const\"\n        }), \" customTheme \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"extendTheme\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  semanticTokens\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    colors\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n      myColor\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n        _dark\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'rgba(0,0,0,0.2)'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n        _light\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"'rgba(255,255,255,0.2)'\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"return\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token tag\",\n          children: [_jsxs(_components.span, {\n            className: \"token tag\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"<\"\n            }), _jsx(_components.span, {\n              className: \"token class-name\",\n              children: \"Box\"\n            })]\n          }), \" \", _jsx(_components.span, {\n            className: \"token attr-name\",\n            children: \"sx\"\n          }), _jsxs(_components.span, {\n            className: \"token script language-javascript\",\n            children: [_jsx(_components.span, {\n              className: \"token script-punctuation punctuation\",\n              children: \"=\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \" color\", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'myColor'\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \">\"\n          })]\n        }), _jsxs(_components.span, {\n          className: \"token tag\",\n          children: [_jsxs(_components.span, {\n            className: \"token tag\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"</\"\n            }), _jsx(_components.span, {\n              className: \"token class-name\",\n              children: \"Box\"\n            })]\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \">\"\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Montando a página de detalhe de artigo\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"A partir de um \", _jsx(_components.em, {\n          children: \"slug\"\n        }), \", tenho que selecionar um arquivo markdown e processá-lo;\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Das libs de markdown, o MDX parece o que tem melhor manutenção, mesmo que injetar componentes React dentro do markdown no momento não seja um requisito;\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Utilizo a lib \", _jsx(_components.code, {\n          children: \"next-mdx-remote\"\n        }), \", a qual serializa dados de um documento markdown no backend (dentro do \", _jsx(_components.code, {\n          children: \"getStaticProps()\"\n        }), \"); Na doc do MDX na verdade foi recomendada outra lib, mas esta funcionou bem; Uso simples e funciona;\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Estilizando documentos\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"A lib de markdown se responsabiliza em converter markdown em HTML, mas não em formatá-lo;\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Sigo o guia na documentação do MDX pra adicionar \", _jsx(_components.em, {\n            children: \"syntax highlighting\"\n          }), \".\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"Escolho a opção \\\"prism\\\" (fujo da pre-histórica \", _jsx(_components.em, {\n              children: \"highlight.js\"\n            }), \");\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Cato no google o CSS com o tema \", _jsx(_components.em, {\n            children: \"Shades of Purple\"\n          }), \" para o \", _jsx(_components.em, {\n            children: \"prism\"\n          }), \". Eu já lembrava desse tema no VS Code e convenientemente ele tem acentos em laranja;\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Edito tamanho de fonte e cor de fundo;\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Os vários elementos diferentes que podem ser gerados têm que ser estilizados manualmente. Mas até que não é tanta coisa:\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"p, h1, h2, h3, blockquote, ul, ol, li, pre\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Isso tudo usando o emotion, que é uma delicinha;\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Lidando com imagens\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"É necessário que as imagens estejam acessíveis a partir da pasta \", _jsx(_components.code, {\n          children: \"public\"\n        }), \", para que elas entrem no build do next.js;\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Inicialmente pensei em verificar se tinha como fazer o webpack embutí-las no build. Mas pensando melhor, pro webpack importar imagens, elas têm que ser estáticas (o que não é o caso);\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Acabei fechando com uma gambiarra imensa:\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"O MDX permite que você dê override nos elementos HTML com componentes React;\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Dei override no componente de imagem, e quando o render roda no servidor, a imagem é copiada da pasta de origem pra pasta \", _jsx(_components.code, {\n              children: \"public\"\n            }), \". Por fim, esta paste de imagens no \", _jsx(_components.code, {\n              children: \"public\"\n            }), \" é ignorada do git;\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"Não necessariamente precisaria copiar, um \", _jsx(_components.em, {\n              children: \"symlink\"\n            }), \" também funcionaria. Mas estou rodando o projeto no Windows e aparentemente no Windows o symlink precisa de permissão administrador;\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Build manual\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"yarn build\"\n        }), \" (invoca \", _jsx(_components.code, {\n          children: \"next build\"\n        }), \")\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"yarn next export\"\n        }), \" (copia tudo para uma pasta \", _jsx(_components.code, {\n          children: \"out\"\n        }), \")\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Mover a pasta \", _jsx(_components.code, {\n          children: \"website/out\"\n        }), \" para \", _jsx(_components.code, {\n          children: \"./docs\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"O GitHub pages aceita que o site esteja ou na raiz ou na pasta \", _jsx(_components.em, {\n              children: \"docs\"\n            }), \";\"]\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Isto é configurado nas configurações do projeto, aba \\\"Pages\\\";\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Ao acessar o site, alguns assets que ficavam na pasta \", _jsx(_components.code, {\n          children: \"_next\"\n        }), \" não foram encontrados; Aparentemente é algo do Github que faz ignorar pastas começando com \", _jsx(_components.code, {\n          children: \"_\"\n        }), \" da build;\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Confirmo a teoria, encontrando no Google um artigo instruindo a criar um arquivo \", _jsx(_components.code, {\n          children: \".jekyllignore\"\n        }), \" na pasta a ser servida (no caso, \", _jsx(_components.code, {\n          children: \"docs\"\n        }), \");\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Funcionou!\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Wikilinks e referências inversas\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"TODO\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Build automática\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Embora eu acredite que com alguma tentativa e erro eu possa criar um \", _jsx(_components.em, {\n          children: \"Actions\"\n        }), \" pra rodar o build do next em todo commit, quero sentar pra estudar com calma a doc do Github Actions; Ficará pra depois;\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Uma interrogação é que o build terá que gerar um commit novo a partir da compilação do nextjs\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"__N_SSG":true}