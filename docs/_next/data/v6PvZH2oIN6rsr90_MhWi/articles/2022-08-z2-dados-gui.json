{"pageProps":{"articlesDetail":{"year":"2022","month":"08","folder":"../md/2022-08-z2-dados-gui","slug":"2022-08-z2-dados-gui","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    img: \"img\",\n    strong: \"strong\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Dados vs. Interface Gráfica\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Uma interface gráfica é um remapeamento de uma estrutura de dados de origem.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"Pasted%20image%2020220804222213.png\",\n        alt: \"Pasted image 20220804222213.png\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Nas frameworks modernas, os dados de origem estão atrelados a componentes. Um componente une dados e layout (HTML).\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Uma das primeiras etapas na construção de uma interface de usuário é: determinar quais \", _jsx(_components.strong, {\n        children: \"dados de origem\"\n      }), \" esta interface está representando. Geralmente esses dados são vindos de uma API externa.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Onde devem morar os dados\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Quando temos um componente só, a escolha de onde os dados irão morar é óbvia. O mesmo componente armazenará todo o estado da aplicação e também todo o layout.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-ts\",\n      children: _jsxs(_components.code, {\n        className: \"language-ts\",\n        children: [_jsxs(_components.span, {\n          className: \"token decorator\",\n          children: [_jsx(_components.span, {\n            className: \"token at operator\",\n            children: \"@\"\n          }), _jsx(_components.span, {\n            className: \"token function\",\n            children: \"Component\"\n          })]\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  selector\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"root\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token string-property property\",\n          children: \"\\\"template\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"token template-string\",\n          children: [_jsx(_components.span, {\n            className: \"token template-punctuation string\",\n            children: \"`\"\n          }), _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\n    <form>\\n      <input type=\\\"text\\\" name=\\\"nome\\\" [(ngModel)]=\\\"nome\\\" />\\n      ...\\n    </form>\\n  \"\n          }), _jsx(_components.span, {\n            className: \"token template-punctuation string\",\n            children: \"`\"\n          })]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: _jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Raiz\"\n          })\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  nome\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token builtin\",\n          children: \"string\"\n        }), \"\\n  assinante\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \" id\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" nome\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" avatar \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n  versoes\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \" id\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" nome\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" dataDeCriacao\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" arquivo \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Quando dividimos layouts em subcomponentes temos também que tratar da divisão dos dados, o que gera alguma complexidade adicional.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"Pasted%20image%2020220804223649.png\",\n        alt: \"Pasted image 20220804223649.png\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ao dividirmos componentes temos que determinar onde deve morar o estado (os dados). No componente pai ou no filho? Qual é o escopo de cada componente?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Seguindo a imagem acima, exemplifico duas possíveis opções:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"1: (imagem)\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"- Componente pai possui id de contrato\\n- Componente pai inicialmente obtêm os objetos completos Versao[]\\n- Versao[] é repassada ao componente filho\\n- Quando há uma alteração nos dados (ex: criada uma nova versão):\\n  - o componente filho SOLICITA ao pai a alteração dos dados;\\n  - o pai aprova a alteração, então os dados atualizados voltam pelo caminho de entrada do comp. filho;\\n- O componente pai é responsável em sincronizar os dados com o servidor (salvar CRUD)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"2:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"- Componente pai apenas sabe o id do contrato (number)\\n- Id do contrato é repassado ao componente filho\\n- Componente filho carrega os objetos completos das versões (Versao[])\\n  - Objetos completos Versao[] armazenados no componente filho\\n- Quando existem alterações nas versões, o componente filho se responsabiliza de:\\n  - Atualizar o seu estado interno Versao[]\\n  - Sincronizar essa informação com o servidor\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"No caso 1 o componente pai faz a gestão de todas as informações, e o componente filho tem menos responsabilidade, apenas se preocupando em exibir informações, mas não de buscá-las ou salvá-las.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"No caso 2 o componente pai não sabe dos detalhes das versões. Diz-se que o estado \\\"desceu\\\".\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"wikiLinks":[{"start":110,"end":145,"display":"Pasted image 20220804222213.png","srclink":"Pasted image 20220804222213.png","actualLink":"Pasted%20image%2020220804222213.png","isImage":true},{"start":1058,"end":1093,"display":"Pasted image 20220804223649.png","srclink":"Pasted image 20220804223649.png","actualLink":"Pasted%20image%2020220804223649.png","isImage":true}],"title":"Dados vs. Interface Gráfica","backlinks":[]}},"__N_SSG":true}