{"pageProps":{"articlesDetail":{"year":"2019","month":"07","folder":"../md/2019-07-docker-notes","slug":"2019-07-docker-notes","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    span: \"span\",\n    em: \"em\",\n    h2: \"h2\",\n    a: \"a\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Docker notes\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"docker container --help\\ndocker container ls\\ndocker contaner ls --all\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Instâncias em execução ou executadas no passado.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Definir imagem\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Dockerfile\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"docker build [--tag=thetag[:v1.0]] .\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"docker image ls\"\n        })\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"docker run <tag>\"\n        }), \" - \", _jsx(_components.strong, {\n          children: \"cria container\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-dockerfile\",\n      children: _jsxs(_components.code, {\n        className: \"language-Dockerfile\",\n        children: [_jsxs(_components.span, {\n          className: \"token instruction\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"FROM\"\n          }), \" python:2.7-slim\"]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"token instruction\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"WORKDIR\"\n          }), \" /app\"]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"token instruction\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"COPY\"\n          }), \" . /app\"]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"token instruction\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"RUN\"\n          }), \" pip install --trusted-host pypi.python.org -r requirements.txt\"]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"token instruction\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"EXPOSE\"\n          }), \" 80\"]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"token instruction\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"ENV\"\n          }), \" NAME World\"]\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"token instruction\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"CMD\"\n          }), \" [\", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"python\\\"\"\n          }), \", \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"app.py\\\"\"\n          }), \"]\"]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Comandos acima controem a imagem no \", _jsx(_components.code, {\n          children: \"docker build\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"CMD\"\n        }), \" é executado no \", _jsx(_components.code, {\n          children: \"docker run\"\n        }), \" sobre a imagem construída no \", _jsx(_components.em, {\n          children: \"build\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Argumentos\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \" -e  env: variável de ambiente\\n -d  detach\\n -it interativo\\n --name\\n -p expor portas\\n -rm apagar apos finalizar\\n --network X : conectar à rede X\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload da imagem\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"docker login\\ndocker push username/repo:tag\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"docker run\"\n      }), \" baixará a imagem se ela não estiver presente na máquina.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prune\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://docs.docker.com/engine/reference/commandline/image_prune/\",\n        children: \"referência\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Imagens\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"docker image prune\"\n        }), \" Limpa imagens sem tag e sem container;\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"docker image prune -a\"\n        }), \" Limpa imagens sem container\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"docker image prune -a --filter \\\"until=24h\\\"\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Containers\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"docker container prune\"\n      }), \" remove containers parados.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Volumes, redes\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"docker system prune\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Stacks\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"docker-compose.yml\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"docker swarm init (ativa o modo swarm)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"docker stack deploy -c docker-compose.yml stackname\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"stack (grupo de serviços) {\\n\\tservice (ex: http server) {\\n\\t\\ttask/container (ex: instancia n do http server)[]\\n\\t}[]\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Listar serviços\"\n        }), \" docker service ls OU --> services\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Listas serviços da stack\"\n        }), \" docker stack services stackname --> services\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Listar tasks/containers do serviço\"\n        }), \" docker service ps servicename --> tasks\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Swarms\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Múltiplas máquinas (\", _jsx(_components.em, {\n          children: \"nodos\"\n        }), \")\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Swarm manager\"\n        }), \" controla o cluster (outros nodos são \", _jsx(_components.strong, {\n          children: \"workers\"\n        }), \")\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-shell\",\n      children: _jsxs(_components.code, {\n        className: \"language-shell\",\n        children: [\"$ docker-machine \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"ssh\"\n        }), \" myvm1 \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"docker swarm init --advertise-addr <myvm1 ip>\\\"\"\n        }), \"\\nTo \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"add\"\n        }), \" a worker to this swarm, run the following command:\\n  \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"docker\"\n        }), \" swarm \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"join\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"\\\\\"\n        }), \"\\n  --token \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), \"token\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"\\\\\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), \"myvm ip\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \":\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"<\"\n        }), \"port\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \"\\n\\n$ docker-machine \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"ssh\"\n        }), \" myvm2 \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"docker swarm join \\\\\\n--token <token> \\\\\\n<ip>:2377\\\"\"\n        }), \"\\n\\nThis \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"node\"\n        }), \" joined a swarm as a worker.\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Listar nodos\"\n        }), \" \", _jsx(_components.code, {\n          children: \"docker node ls\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Sair\"\n        }), \" \", _jsx(_components.code, {\n          children: \"docker swarm leave\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"Alterar ambiente\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-shell\",\n      children: _jsxs(_components.code, {\n        className: \"language-shell\",\n        children: [\"$ docker-machine \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"env\"\n        }), \" myvm1\\n\", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token assign-left variable\",\n          children: \"DOCKER_TLS_VERIFY\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"1\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token assign-left variable\",\n          children: \"DOCKER_HOST\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"tcp://192.168.99.100:2376\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token assign-left variable\",\n          children: \"DOCKER_CERT_PATH\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"/Users/sam/.docker/machine/machines/myvm1\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token builtin class-name\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token assign-left variable\",\n          children: \"DOCKER_MACHINE_NAME\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"myvm1\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# Run this command to configure your shell:\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"# eval $(docker-machine env myvm1)\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"docker-machine ls\"\n        }), \" - Listar máquinas, verificar se está no ambiente\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Rodar o \", _jsx(_components.code, {\n          children: \"docker stack deploy\"\n        }), \" agora irá fazer com que rode como se estivesse na máquina ambiente, mas com acesso a seus arquivos\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Derrubar a stack\"\n        }), \" \", _jsx(_components.code, {\n          children: \"docker stack rm\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Resetar ambiente\"\n        }), \" \", _jsx(_components.code, {\n          children: \"eval $(docker-machine env -u)\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Iniciar máquina parada\"\n        }), \" \", _jsx(_components.code, {\n          children: \"docker-machine start|stop <machine-name>\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h1, {\n      children: \"Networks\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Tipos\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"bridge\"\n        }), \" - docker --> host\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"host\"\n        }), \" - remover isolamento entre container e host\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"overlay\"\n        }), \" - comunicação de swarm\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"macvlan\"\n        }), \" - aparecer como dispositivo físico\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"none\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Na criação de um serviço, por padrão este entra na rede de tipo \", _jsx(_components.em, {\n        children: \"overlay\"\n      }), \"  de no me \", _jsx(_components.em, {\n        children: \"ingress\"\n      }), \" , exceto se especificado o contrário.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"title":"Docker notes"}},"__N_SSG":true}