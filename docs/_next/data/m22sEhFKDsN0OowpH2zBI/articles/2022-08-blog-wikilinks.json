{"pageProps":{"articlesDetail":{"year":"2022","month":"08","folder":"../md/2022-08-blog-wikilinks","slug":"2022-08-blog-wikilinks","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    em: \"em\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Atualização do blog: Wikilinks e Tags\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"0000-00-tag-blog-release-notes\",\n        children: \"Tag: Blog release notes\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Sobre Wikilinks\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://en.wikipedia.org/wiki/Help:Link\",\n          children: \"Documentação de Links da Wikipédia\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Escrever links com menos fricção, e usando linguagem natural (usando o próprio título da referência);\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Um wikilink pode referenciar uma página que ainda não existe, indicando uma intenção de futuramente escrever um novo artigo expandindo sobre um assunto;\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Implementação\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Substituição ingênua de strings;\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Implementar lógica que relacione um texto de wikilink com um link acessível;\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"Usada busca fuzzy sobre títulos de artigos, de modo a permitir uma \\\"margem de erro\\\" na definição de links (escrever um conteúdo parecido com um título de artigo basta);\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Posteriormente notado que ao invés de substituir strings não mão, talvez teria sido melhor usar um \", _jsx(_components.a, {\n          href: \"https://github.com/landakram/remark-wiki-link\",\n          children: \"plugin\"\n        }), \" para o \", _jsx(_components.em, {\n          children: \"remark\"\n        }), \", o parser de markdown usado no projeto;\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"O plugin também permite implementação de \\\"resolução de links\\\" personalizada, além de uma implementação mais completa de links (como o uso de cores diferentes pra links existentes ou não);\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Tags\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Inspirado no que pode ser feito no Notion, uma tag pode ser definida como uma mera referência a uma página existente; Para definir uma tag, basta criar um página, a exemplo de \", _jsx(_components.a, {\n          href: \"0000-00-tag-blog-release-notes\",\n          children: \"Tag: Blog release notes\"\n        }), \";\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"A listagem de itens marcados por uma tag é realizada a partir de backlinks;\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"(01/08/2022) Backlinks\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Definição\"\n      }), \": Determinar, para cada página, todos os links no projeto que referenciam a esta;\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Este é um caso de complexidade maior, pois agora toda página depende do projeto inteiro.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Devido a ordem das dependências, este se torna um forte candidato para uma informação a ser carregada apenas no lado do cliente. Mas mantive ela no servidor.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Página 1 com backlinks\\n  depende de\\n  Backlinks da página 1\\n    depende de\\n    Detalhe de todas as páginas\\n      depende de\\n      Listagem de páginas\\n  e de\\n  Detalhe da página 1\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Inicialmente ingenuamente coloquei as páginas já carregadas em um cache na memória; Isto não adiantou, e todas as páginas foram carregadas umas 4 vezes;\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Logando \", _jsx(_components.code, {\n          children: \"process.pid\"\n        }), \" confirmamos a desconfiança de que build é paralelizada em vários subprocessos;\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Entramos aqui em um problema de IPC. O cache tem que ser lido e salvo a partir de comunicação externa.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Uma idéia trabalhosa aqui seria lansar um processo de cache. Como esse processo se comunicaria? stdout? Socket?\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Se o subprocesso for lançado a partir de um dos processos filhos, quando este filho terminar a build, o next chama um \", _jsx(_components.code, {\n          children: \"process.exit()\"\n        }), \" nele, matando também o subprocesso;\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Acabei seguindo por uma idéia talvez menos eficiente, que foi o uso de um banco SQLite para comunicação;\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Segundo documentação, o SQLite lida com sincronização de vários clientes lendo e escrevendo no mesmo arquivo;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Um problema aqui é que pra aguardar a conclusão de tarefas temos que fazer polling no banco;\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-ts\",\n      children: _jsxs(_components.code, {\n        className: \"language-ts\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"tryCache\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"cacheKey\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" useCache\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"if\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"useCache\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"let\"\n        }), \" foundCache \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sqlQuery\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token spread operator\",\n          children: \"...\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"if\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"!\"\n        }), \"foundCache\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// este processo vai calcular o resultado desta chave\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sqlQuery\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"/* INSERT: set as pending */\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword null nil\",\n          children: \"null\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"else\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// outro processo já está calculando, aguardar\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"if\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"foundCache\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"ready\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"return\"\n        }), \" foundCache\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"data\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"while\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"!\"\n        }), \"foundCache\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"ready\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"await\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"wait\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n        foundCache \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"sqlQuery\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token spread operator\",\n          children: \"...\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"return\"\n        }), \" foundCache\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token property-access\",\n          children: \"data\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"else\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword null nil\",\n          children: \"null\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Um segundo problema aqui é que uma grande fatia do processamento vai ficar em um processo só (excluindo a parte de I/O que é abstraída pelo node); No fim das contas os outros processos do next vão só processar a geração final de HTML;\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"wikiLinks":[{"start":41,"end":68,"display":"Tag: Blog release notes","srclink":"Tag: Blog release notes","actualLink":"0000-00-tag-blog-release-notes","isImage":false},{"start":1349,"end":1376,"display":"Tag: Blog release notes","srclink":"Tag: Blog release notes","actualLink":"0000-00-tag-blog-release-notes","isImage":false}],"title":"Atualização do blog: Wikilinks e Tags","backlinks":[]}},"__N_SSG":true}